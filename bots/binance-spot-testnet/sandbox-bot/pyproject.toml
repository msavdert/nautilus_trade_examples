[project]
name = "nautilus-sandbox-bot"
version = "3.0.0"
description = "üåä Nautilus Trader - Professional Sandbox Trading Bot with EMA Cross Strategy"
authors = [
    {name = "Nautilus Trader Team", email = "info@nautilustrader.io"}
]
readme = "README.md"
license = {text = "LGPL-3.0"}
keywords = ["trading", "algorithmic", "binance", "testnet", "ema", "cross", "strategy", "sandbox"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"

# === CORE DEPENDENCIES ===
dependencies = [
    # üåä Nautilus Trader - Core Trading Framework
    "nautilus_trader>=1.218.0",
    
    # üìä Data Processing & Analysis
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    
    # üîß Configuration & Environment
    "python-dotenv>=1.0.0",         # .env file support
    "pydantic>=2.0.0",              # Data validation (Nautilus dependency)
    "msgspec>=0.19.0",              # High-performance serialization
    
    # üóÑÔ∏è Database & Cache
    "psycopg2-binary>=2.9.0",       # PostgreSQL adapter
    "redis>=5.0.0",                 # Redis client
    "sqlalchemy>=2.0.0",            # Database ORM
    
    # üåê HTTP & Networking
    "aiohttp>=3.9.0",               # Async HTTP client (Binance API)
    "requests>=2.31.0",             # HTTP client for testing
    "websockets>=12.0",             # WebSocket client (Binance streams)
    
    # üìà Market Data & Exchange APIs
    "ccxt>=4.0.0",                  # Exchange integrations (backup)
    "python-binance>=1.0.19",       # Binance Python SDK (if needed)
    
    # üîí Security & Cryptography
    "cryptography>=41.0.0",         # Crypto operations (API signatures)
    "pyotp>=2.9.0",                 # TOTP for 2FA (if needed)
    
    # ‚è∞ Time & Date Handling
    "pytz>=2023.3",                 # Timezone support
    "python-dateutil>=2.8.0",       # Date parsing utilities
    
    # üìù Logging & Monitoring
    "structlog>=23.0.0",            # Structured logging
    "rich>=13.0.0",                 # Pretty terminal output
    
    # üßÆ Mathematical & Statistical
    "scipy>=1.11.0",                # Scientific computing
    "ta-lib>=0.4.28",               # Technical analysis indicators (optional)
    
    # üîÑ Async & Concurrency
    "asyncio>=3.4.3",               # Async programming support
    "uvloop>=0.19.0",               # Fast async event loop (Unix only)
]

# === OPTIONAL DEPENDENCIES ===
[project.optional-dependencies]

# üìä Enhanced Analytics
analytics = [
    "matplotlib>=3.7.0",           # Plotting and visualization
    "plotly>=5.17.0",               # Interactive charts
    "seaborn>=0.13.0",              # Statistical visualization
    "jupyter>=1.0.0",               # Jupyter notebook support
    "ipykernel>=6.25.0",            # Jupyter kernel
]

# üß™ Development & Testing
dev = [
    "pytest>=7.4.0",               # Testing framework
    "pytest-asyncio>=0.21.0",      # Async testing
    "pytest-cov>=4.1.0",           # Coverage reporting
    "black>=23.0.0",               # Code formatting
    "isort>=5.12.0",               # Import sorting
    "flake8>=6.0.0",               # Linting
    "mypy>=1.5.0",                 # Type checking
    "pre-commit>=3.4.0",           # Git hooks
]

# üöÄ Production Deployment
production = [
    "gunicorn>=21.2.0",            # WSGI server
    "uvicorn>=0.23.0",             # ASGI server
    "docker>=6.1.0",               # Docker Python SDK
    "kubernetes>=27.2.0",          # Kubernetes Python client
    "prometheus-client>=0.17.0",   # Metrics collection
]

# üîç Monitoring & Observability
monitoring = [
    "prometheus-client>=0.17.0",   # Prometheus metrics
    "grafana-api>=1.0.3",          # Grafana integration
    "datadog>=0.47.0",             # DataDog monitoring
    "newrelic>=9.0.0",             # New Relic APM
]

# üìà Advanced Trading Features
advanced = [
    "zipline-reloaded>=3.0.0",     # Backtesting framework
    "backtrader>=1.9.78.123",      # Alternative backtesting
    "quantlib>=1.32",              # Quantitative finance library
    "pyfolio-reloaded>=0.9.5",     # Portfolio analysis
]

# üåê All optional dependencies
all = [
    "nautilus-sandbox-bot[analytics,dev,production,monitoring,advanced]"
]

# === BUILD SYSTEM ===
[build-system]
requires = [
    "setuptools>=68.0.0",
    "wheel>=0.41.0",
    "build>=0.10.0"
]
build-backend = "setuptools.build_meta"

# === TOOL CONFIGURATIONS ===

# üêç Python Path Configuration
[tool.setuptools]
package-dir = {"" = "."}
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "build*", "dist*"]

# ‚ö´ Black Code Formatter
[tool.black]
line-length = 100
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories to exclude
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | data
)/
'''

# üì¶ isort Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["nautilus_trader"]
known_third_party = [
    "pandas", "numpy", "redis", "psycopg2", "sqlalchemy",
    "aiohttp", "websockets", "ccxt", "binance", "dotenv"
]

# üîç MyPy Type Checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# üß™ Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",                    # Show summary of all test results
    "--strict-markers",       # Enforce marker registration
    "--strict-config",        # Enforce configuration validation
    "--cov=.",               # Coverage for current directory
    "--cov-report=term-missing",  # Show missing lines in coverage
    "--cov-report=html:htmlcov",  # HTML coverage report
    "--cov-fail-under=80",    # Minimum coverage threshold
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "live: marks tests that require live market data",
]

# üìù Coverage Configuration
[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
    "*/site-packages/*",
    "*/.venv/*",
    "*/venv/*",
    "logs/*",
    "data/*",
    "htmlcov/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# === PROJECT URLs ===
[project.urls]
"Homepage" = "https://github.com/nautechsystems/nautilus_trader"
"Documentation" = "https://docs.nautilustrader.io/"
"Repository" = "https://github.com/nautechsystems/nautilus_trader"
"Bug Tracker" = "https://github.com/nautechsystems/nautilus_trader/issues"
"Discord" = "https://discord.gg/N8TS3eazFd"
"Twitter" = "https://twitter.com/nautilustrader"
