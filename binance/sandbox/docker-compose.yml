services:
  # Main trading client
  binance-client:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: binance_client
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-sandbox}
      - TESTNET=${TESTNET:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import health; health.check()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - trading

  # Development environment
  binance-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: binance_dev
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - ENVIRONMENT=development
      - TESTNET=true
      - LOG_LEVEL=DEBUG
      - DEBUG=true
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
    stdin_open: true
    tty: true
    command: /bin/bash
    networks:
      - trading

  # Testing environment
  binance-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    container_name: binance_test
    environment:
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - ENVIRONMENT=test
      - TESTNET=true
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: python -m pytest tests/ -v --tb=short
    networks:
      - trading

networks:
  trading:
    driver: bridge

volumes:
  logs:
    driver: local
  data:
    driver: local
